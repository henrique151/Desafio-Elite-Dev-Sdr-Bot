import logging
import time
import pytz
from datetime import datetime
from typing import List, Dict, Any
from fastapi import HTTPException
from google import genai
from google.genai import types
from google.genai.errors import APIError

from .pipefy_service import registrar_lead, atualizar_card_com_reuniao
from .calendar_service import oferecer_horarios, agendar_reuniao

# ============================
# Configura√ß√£o do Logger
# ============================
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# ============================
# Inicializa√ß√£o do Cliente Gemini
# ============================
try:
    client = genai.Client()
    logger.info("Cliente Gemini inicializado com sucesso.")
except Exception as e:
    logger.error(
        f"Erro ao inicializar o cliente Gemini. Verifique GEMINI_API_KEY: {e}")
    client = None

# ============================
# Ferramentas dispon√≠veis
# ============================
AVAILABLE_TOOLS = {
    "registrar_lead": registrar_lead,
    "atualizar_card_com_reuniao": atualizar_card_com_reuniao,
    "oferecer_horarios": oferecer_horarios,
    "agendar_reuniao": agendar_reuniao,
}

# ============================
# Instru√ß√£o do Sistema do Agente SDR
# ============================
SDR_SYSTEM_INSTRUCTION = """
Voc√™ √© o **Agente SDR-Elite-Dev-IA**, um assistente de pr√©-vendas profissional, emp√°tico e eficiente, que conduz conversas com naturalidade e clareza.

**Seu objetivo principal:**
Qualificar leads e agendar reuni√µes com o time comercial, usando as ferramentas dispon√≠veis.

---

### Fluxo ideal de conversa

1. **Apresenta√ß√£o natural**
   - Cumprimente o cliente de forma breve e simp√°tica.
   - Diga em uma frase o motivo do contato (ex: ‚Äúsou da equipe da Elite Dev e quero entender melhor suas necessidades para te ajudar no projeto‚Äù).

2. **Descoberta progressiva**
   - Fa√ßa perguntas abertas e naturais, uma de cada vez:
     - Nome
     - Empresa
     - E-mail
     - Necessidade/dor
   - Sempre contextualize a pergunta (ex: ‚ÄúPara que eu possa te ajudar melhor, voc√™ pode me dizer o nome da sua empresa?‚Äù).

3. **Confirma√ß√£o de interesse**
   - Resuma o que foi entendido (‚ÄúEntendi, voc√™ busca X para resolver Y‚Äù).
   - Pergunte se o cliente gostaria de conversar com o time t√©cnico/comercial.
   - **S√≥ agende se o cliente confirmar claramente.**

4. **Agendamento**
   - Sempre use o fuso hor√°rio fixo: "America/Sao_Paulo"
   - Use `oferecer_horarios` para sugerir 2-3 op√ß√µes.
   - Ap√≥s o cliente escolher, chame `agendar_reuniao`.
   - Informe a data, hora e link da reuni√£o de forma clara e agrad√°vel.

5. **Registro**
   - Registre o lead no Pipefy usando `registrar_lead`.
   - Se o e-mail j√° existir, atualize o card existente.
   - Se o cliente n√£o quiser prosseguir, registre e encerre cordialmente.

---

### Estilo de comunica√ß√£o
- Tom profissional, leve e emp√°tico.
- Fa√ßa resumos curtos ap√≥s blocos de informa√ß√£o (‚ÄúPerfeito, ent√£o voc√™ √© da empresa X e busca Y, certo?‚Äù).
- Evite jarg√µes t√©cnicos.
- Use frases curtas e diretas.
- Nunca repita informa√ß√µes que o cliente j√° deu.
- Sempre mantenha um tom de **conversa natural**, como se fosse um humano conversando por WhatsApp.
- Para sugerir hor√°rios, use o seguinte modelo:
  "Nome do Usu√°rio, temos os seguintes hor√°rios dispon√≠veis hoje: 14:00, 15:00 e 16:00 (hor√°rio de S√£o Paulo). Qual deles √© mais conveniente para voc√™?"

---

### Regras t√©cnicas
- Use as ferramentas dispon√≠veis apenas quando necess√°rio:
  - `registrar_lead(nome, email, empresa, necessidade)`
  - `oferecer_horarios()`
  - `agendar_reuniao(card_id, nome, email, datetime)`
  - `atualizar_card_com_reuniao(card_id, link, data)`
- Sempre use o fuso `"America/Sao_Paulo"`.
- N√£o gere texto junto com a execu√ß√£o de ferramenta ‚Äî apenas a chamada.
- Quando retornar ao cliente ap√≥s usar uma ferramenta, **resuma o que foi feito** (‚ÄúPerfeito! Reuni√£o agendada para ter√ßa √†s 15h. O link foi enviado para seu e-mail.‚Äù).
- N√£o pergunte fuso hor√°rio; use sempre "America/Sao_Paulo".
- Sempre enviar o link da reuni√£o pelo chat com usu√°rio.

### Exemplo de conversa natural
**Agente:** Ol√°! Sou da Elite Dev, tudo bem? üòä  
Estamos ajudando empresas a acelerar seus projetos de software.  
Voc√™ pode me dizer seu nome completo, por favor?

**Cliente:** Jo√£o Oliveira.

**Agente:** √ìtimo, Jo√£o! E de qual empresa voc√™ fala?

**Cliente:** TechPro.

**Agente:** Perfeito, Jo√£o da TechPro! Qual √© o principal desafio que voc√™s est√£o enfrentando hoje com tecnologia?

**(segue at√© coletar informa√ß√µes e agendar reuni√£o)**
"""

# ============================
# Fun√ß√µes auxiliares
# ============================


def prepare_history_for_gemini(history: list[dict]) -> list[dict]:
    prepared = []
    for item in history:
        role = item.get("role", "user")
        if role not in ("user", "model"):
            role = "model"

        parts = []
        for part in item.get("parts", []):
            if "text" in part and part["text"]:
                parts.append({"text": part["text"]})
            elif "functionCall" in part:
                parts.append({"functionCall": part["functionCall"]})
            elif "functionResponse" in part:
                parts.append({"functionResponse": part["functionResponse"]})
        prepared.append({"role": role, "parts": parts})
    return prepared


# ============================
# Execu√ß√£o principal
# ============================
MAX_RETRIES = 3
PRIMARY_MODEL = "gemini-2.5-flash"
FALLBACK_MODEL = "gemini-2.0-flash"


def run_gemini_agent(history: List[Dict[str, Any]]) -> types.GenerateContentResponse:
    if client is None:
        raise Exception("Cliente Gemini n√£o configurado.")

    tz = pytz.timezone("America/Sao_Paulo")
    hoje = datetime.now(tz).strftime("%d/%m/%Y %H:%M")

    system_instruction_with_date = f"""
        Hoje √© {hoje} (fuso hor√°rio America/Sao_Paulo).
        Sempre use essa data e hora como refer√™ncia para determinar se uma reuni√£o est√° no passado ou no futuro.
        Sempre responda em texto puro, sem Markdown, negrito, it√°lico ou qualquer outro tipo de formata√ß√£o.
        N√£o mencione que o link da reuni√£o foi enviado pelo Gmail.
        {SDR_SYSTEM_INSTRUCTION}
    """
    history = prepare_history_for_gemini(history)
    gemini_contents: List[types.Content] = []

    for item in history:
        role = item["role"]
        parts_data = item["parts"]
        gemini_parts: List[types.Part] = []

        for part in parts_data:
            if "text" in part:
                gemini_parts.append(types.Part(text=part["text"]))
            elif "functionCall" in part:
                fc = part["functionCall"]
                gemini_parts.append(types.Part.from_function_call(
                    types.FunctionCall(name=fc["name"], args=fc["args"])
                ))
            elif "functionResponse" in part:
                fr = part["functionResponse"]
                gemini_parts.append(types.Part.from_function_response(
                    name=fr["name"], response=fr["response"]
                ))
        gemini_contents.append(types.Content(role=role, parts=gemini_parts))

    def _call_gemini_with_retry(contents):
        for attempt in range(MAX_RETRIES):
            try:
                return client.models.generate_content(
                    model=PRIMARY_MODEL,
                    contents=contents,
                    config=types.GenerateContentConfig(
                        system_instruction=system_instruction_with_date,
                        tools=list(AVAILABLE_TOOLS.values()),
                    ),
                )
            except APIError as e:
                if "503" in str(e) or "UNAVAILABLE" in str(e):
                    wait = 40
                    logger.warning(
                        f"[WARN] Gemini sobrecarregado. Tentativa {attempt+1}/{MAX_RETRIES} ‚Äî aguardando {wait:.1f}s...")
                    time.sleep(wait)
                elif "NOT_FOUND" in str(e):
                    logger.warning(
                        f"[WARN] Modelo {PRIMARY_MODEL} indispon√≠vel. Alternando para {FALLBACK_MODEL}.")
                    return client.models.generate_content(
                        model=FALLBACK_MODEL,
                        contents=contents,
                        config=types.GenerateContentConfig(
                            system_instruction=system_instruction_with_date,
                            tools=list(AVAILABLE_TOOLS.values()),
                        ),
                    )
                else:
                    raise
        raise HTTPException(
            status_code=503, detail="O modelo est√° temporariamente indispon√≠vel. Tente novamente em alguns segundos.")

    try:
        response = _call_gemini_with_retry(gemini_contents)

        if hasattr(response, "function_calls") and response.function_calls:
            fc = response.function_calls[0]
            tool_name = fc.name
            args = fc.args or {}

            logger.info(f"[GEMINI] Chamando ferramenta: {tool_name}({args})")

            if tool_name in AVAILABLE_TOOLS:
                tool_func = AVAILABLE_TOOLS[tool_name]
                result = tool_func(**args)

                response = _call_gemini_with_retry([
                    *gemini_contents,
                    types.Content(
                        role="function",
                        parts=[
                            types.Part.from_function_response(
                                name=tool_name,
                                response={"name": tool_name,
                                          "response": result},
                            )
                        ],
                    ),
                ])
            else:
                raise Exception(f"Ferramenta desconhecida: {tool_name}")

        return response

    except Exception as e:
        logger.error(f"Erro no Gemini Agent: {e}")
        raise HTTPException(status_code=500, detail=str(e))
